/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.17).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.toystore.ecomm.payments.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.toystore.ecomm.payments.model.Error;
import com.toystore.ecomm.payments.model.Message;
import com.toystore.ecomm.payments.model.Subscriptionpayment;
import com.toystore.ecomm.payments.model.Subscriptionpaymentresponse;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-11-06T13:12:16.732Z")

@Api(value = "subscriptionpayment", description = "the subscriptionpayment API")
@RequestMapping(value = "/payments")
public interface SubscriptionpaymentApi {

    @ApiOperation(value = "Subscriptionpayment_GET", nickname = "getSubscriptionpaymentGET", notes = "Get a Subscriptionpayment by subscriptionpaymentId", response = Subscriptionpayment.class, tags={ "subscriptionpayment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Subscriptionpayment.class),
        @ApiResponse(code = 404, message = "TODO: Add error message", response = Error.class) })
    @RequestMapping(value = "/subscriptionpayment/{subscriptionPaymentId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Subscriptionpayment> getSubscriptionpaymentGET(@ApiParam(value = "",required=true) @PathVariable("subscriptionPaymentId") String subscriptionPaymentId);


	/*
	 * @ApiOperation(value = "Subscriptionpayment_POST", nickname =
	 * "postSubscriptionpaymentPOST", notes =
	 * "Subscriptionpayment using Username & Password", response =
	 * Subscriptionpaymentresponse.class, tags={ "subscriptionpayment", })
	 * 
	 * @ApiResponses(value = {
	 * 
	 * @ApiResponse(code = 201, message = "", response =
	 * Subscriptionpaymentresponse.class),
	 * 
	 * @ApiResponse(code = 400, message = "TODO: Add error message", response =
	 * Error.class) })
	 * 
	 * @RequestMapping(value = "/subscriptionpayment/{subscriptionPaymentId}",
	 * produces = { "application/json" }, consumes = { "application/json" }, method
	 * = RequestMethod.POST) ResponseEntity<Subscriptionpaymentresponse>
	 * postSubscriptionpaymentPOST(@ApiParam(value =
	 * "",required=true) @PathVariable("subscriptionPaymentId") String
	 * subscriptionPaymentId,@ApiParam(value = "" ,required=true
	 * ) @Valid @RequestBody Subscriptionpayment body);
	 */


    @ApiOperation(value = "Subscriptionpayment_DELETE", nickname = "subscriptionpaymentDELETE", notes = "Delete a Subscriptionpayment by subscriptionpaymentId", tags={ "subscriptionpayment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = ""),
        @ApiResponse(code = 404, message = "TODO: Add error message", response = Error.class) })
    @RequestMapping(value = "/subscriptionpayment/{subscriptionPaymentId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> subscriptionpaymentDELETE(@ApiParam(value = "",required=true) @PathVariable("subscriptionPaymentId") String subscriptionPaymentId);


    @ApiOperation(value = "Subscriptionpayment_GET", nickname = "subscriptionpaymentGET", notes = "Get a list of Subscriptionpayment", response = Subscriptionpayment.class, responseContainer = "List", tags={ "subscriptionpayment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Subscriptionpayment.class, responseContainer = "List") })
    @RequestMapping(value = "/subscriptionpayment",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Subscriptionpayment>> subscriptionpaymentGET();


    @ApiOperation(value = "Subscriptionpayment_POST", nickname = "subscriptionpaymentPOST", notes = "Add a new Subscriptionpayment", response = Subscriptionpaymentresponse.class, tags={ "subscriptionpayment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "", response = Subscriptionpaymentresponse.class) })
    @RequestMapping(value = "/subscriptionpayment",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<?> subscriptionpaymentPOST(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Subscriptionpayment body) throws IllegalAccessException, InstantiationException;


    @ApiOperation(value = "Subscriptionpayment_PUT", nickname = "subscriptionpaymentPUT", notes = "Update a Subscriptionpayment by subscriptionpaymentId", response = Subscriptionpayment.class, tags={ "subscriptionpayment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Subscriptionpayment.class),
        @ApiResponse(code = 404, message = "TODO: Add error message", response = Error.class) })
    @RequestMapping(value = "/subscriptionpayment/{subscriptionPaymentId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Subscriptionpayment> subscriptionpaymentPUT(@ApiParam(value = "",required=true) @PathVariable("subscriptionPaymentId") String subscriptionPaymentId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Subscriptionpayment body);


    @ApiOperation(value = "SubscriptionpaymentPaymentfailed_POST", nickname = "subscriptionpaymentPaymentfailedPOST", notes = "", response = Subscriptionpayment.class, tags={ "subscriptionpayment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Subscriptionpayment.class) })
    @RequestMapping(value = "/subscriptionpayment/paymentfailed",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Subscriptionpayment> subscriptionpaymentPaymentfailedPOST();


    @ApiOperation(value = "SubscriptionpaymentPaymentsucceeded_POST", nickname = "subscriptionpaymentPaymentsucceededPOST", notes = "", response = Subscriptionpayment.class, tags={ "subscriptionpayment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Subscriptionpayment.class) })
    @RequestMapping(value = "/subscriptionpayment/paymentsucceeded",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Subscriptionpayment> subscriptionpaymentPaymentsucceededPOST();


    @ApiOperation(value = "SubscriptionpaymentSchedulecreated_POST", nickname = "subscriptionpaymentSchedulecreatedPOST", notes = "", response = Message.class, tags={ "subscriptionpayment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Message.class) })
    @RequestMapping(value = "/subscriptionpayment/schedulecreated",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Message> subscriptionpaymentSchedulecreatedPOST();


    @ApiOperation(value = "SubscriptionpaymentScheduleexpires_POST", nickname = "subscriptionpaymentScheduleexpiresPOST", notes = "", response = Message.class, tags={ "subscriptionpayment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Message.class) })
    @RequestMapping(value = "/subscriptionpayment/scheduleexpires",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Message> subscriptionpaymentScheduleexpiresPOST(@ApiParam(value = "" ,required=true )  @Valid @RequestBody String body);


    @ApiOperation(value = "SubscriptionpaymentTrialends_POST", nickname = "subscriptionpaymentTrialendsPOST", notes = "", response = Message.class, tags={ "subscriptionpayment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Message.class) })
    @RequestMapping(value = "/subscriptionpayment/trialends",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Message> subscriptionpaymentTrialendsPOST();


    @ApiOperation(value = "SubscriptionpaymentTrialexpired_POST", nickname = "subscriptionpaymentTrialexpiredPOST", notes = "", response = Message.class, tags={ "subscriptionpayment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Message.class) })
    @RequestMapping(value = "/subscriptionpayment/trialexpired",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Message> subscriptionpaymentTrialexpiredPOST(@ApiParam(value = "" ,required=true )  @Valid @RequestBody String body);

}
