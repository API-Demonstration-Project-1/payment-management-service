/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.17).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.toystore.ecomm.payments.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.toystore.ecomm.payments.model.Error;
import com.toystore.ecomm.payments.model.Payment;
import com.toystore.ecomm.payments.model.Paymentresponse;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-11-06T13:12:16.732Z")

@Api(value = "payment", description = "the payment API")
@RequestMapping(value = "/payments")
public interface PaymentApi {

    @ApiOperation(value = "PaymentByPaymentId_DELETE", nickname = "paymentByPaymentIdDELETE", notes = "Delete a Payment by paymentId", tags={ "payment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = ""),
        @ApiResponse(code = 404, message = "TODO: Add error message", response = Error.class) })
    @RequestMapping(value = "/payment/{paymentId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> paymentByPaymentIdDELETE(@ApiParam(value = "",required=true) @PathVariable("paymentId") String paymentId);


    @ApiOperation(value = "PaymentByPaymentId_GET", nickname = "paymentByPaymentIdGET", notes = "Get a Payment by paymentId", response = Payment.class, tags={ "payment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Payment.class),
        @ApiResponse(code = 404, message = "TODO: Add error message", response = Error.class) })
    @RequestMapping(value = "/payment/{paymentId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Payment> paymentByPaymentIdGET(@ApiParam(value = "",required=true) @PathVariable("paymentId") String paymentId);


    @ApiOperation(value = "PaymentByPaymentId_POST", nickname = "paymentByPaymentIdPOST", notes = "Payment using Username & Password", response = Paymentresponse.class, tags={ "payment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "", response = Paymentresponse.class),
        @ApiResponse(code = 400, message = "TODO: Add error message", response = Error.class) })
    @RequestMapping(value = "/payment/{paymentId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Paymentresponse> paymentByPaymentIdPOST(@ApiParam(value = "",required=true) @PathVariable("paymentId") String paymentId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Payment body);


    @ApiOperation(value = "PaymentByPaymentId_PUT", nickname = "paymentByPaymentIdPUT", notes = "Update a Payment by paymentId", response = Payment.class, tags={ "payment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Payment.class),
        @ApiResponse(code = 404, message = "TODO: Add error message", response = Error.class) })
    @RequestMapping(value = "/payment/{paymentId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Payment> paymentByPaymentIdPUT(@ApiParam(value = "",required=true) @PathVariable("paymentId") String paymentId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Payment body);


    @ApiOperation(value = "Payment_GET", nickname = "paymentGET", notes = "Get a list of Payment", response = Payment.class, responseContainer = "List", tags={ "payment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Payment.class, responseContainer = "List") })
    @RequestMapping(value = "/payment",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Payment>> paymentGET(@ApiParam(value = "Get payment info for a given Tenant Name") @Valid @RequestParam(value = "tenantName", required = false) String tenantName,@ApiParam(value = "Get all payment info based on payment status") @Valid @RequestParam(value = "paymentStatus", required = false) String paymentStatus,@ApiParam(value = "Get all payment info based on payment method") @Valid @RequestParam(value = "paymentMethod", required = false) String paymentMethod);


    @ApiOperation(value = "Payment_POST", nickname = "paymentPOST", notes = "Add a new Payment", response = Paymentresponse.class, tags={ "payment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "", response = Paymentresponse.class) })
    @RequestMapping(value = "/payment",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<String> paymentPOST(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Payment body) throws IllegalAccessException, InstantiationException;

}
